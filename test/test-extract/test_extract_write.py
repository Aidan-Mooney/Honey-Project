from unittest.mock import patch

from src.extract.extract_write import extract_write


def test_correct_number_of_lines_is_returned_and_data_is_saved_with_one_product_and_payment():
    test_path = "test/path"
    test_json = [
        {
            "amount": 1000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "gpsCoordinates": {
                "accuracyMeters": 35.0,
                "latitude": 00.0000000000000,
                "longitude": 00.00000000000000,
            },
            "groupedVatAmounts": {"0.0": 1000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 1000,
                    "attributes": {
                        "applicationIdentifier": "A1111111111111",
                        "applicationName": "test_application",
                        "authorizationCode": "six_nums",
                        "cardHolderVerificationMethod": "test_verification_method",
                        "cardPaymentEntryMode": "test_entry_mode",
                        "cardType": "test_card_type",
                        "maskedPan": "test_masked_pan",
                        "referenceNumber": "test_reference",
                        "terminalVerificationResults": "0000000000",
                    },
                    "createdAt": "2000-01-01T00:00:00.000+0000",
                    "type": "IZETTLE_CARD",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                }
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 1000,
                    "totalAmount": 1000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 3
    assert write_args_mock.call_count == 3
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            1000,
            "2000-01-01T00:00:00.000+0000",
            0.0,
            0.0,
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/card.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            "test_masked_pan",
            1000,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]


def test_empty_strings_are_saved_when_no_lat_and_long_are_in_json():
    test_path = "test/path"
    test_json = [
        {
            "amount": 1000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "groupedVatAmounts": {"0.0": 1000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 1000,
                    "attributes": {
                        "applicationIdentifier": "A1111111111111",
                        "applicationName": "test_application",
                        "authorizationCode": "six_nums",
                        "cardHolderVerificationMethod": "test_verification_method",
                        "cardPaymentEntryMode": "test_entry_mode",
                        "cardType": "test_card_type",
                        "maskedPan": "test_masked_pan",
                        "referenceNumber": "test_reference",
                        "terminalVerificationResults": "0000000000",
                    },
                    "createdAt": "2000-01-01T00:00:00.000+0000",
                    "type": "IZETTLE_CARD",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                }
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 1000,
                    "totalAmount": 1000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 3
    assert write_args_mock.call_count == 3
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            1000,
            "2000-01-01T00:00:00.000+0000",
            "",
            "",
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/card.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            "test_masked_pan",
            1000,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]


def test_multiple_products_are_saved():
    test_path = "test/path"
    test_json = [
        {
            "amount": 2000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "gpsCoordinates": {
                "accuracyMeters": 35.0,
                "latitude": 00.0000000000000,
                "longitude": 00.00000000000000,
            },
            "groupedVatAmounts": {"0.0": 2000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 2000,
                    "attributes": {
                        "applicationIdentifier": "A1111111111111",
                        "applicationName": "test_application",
                        "authorizationCode": "six_nums",
                        "cardHolderVerificationMethod": "test_verification_method",
                        "cardPaymentEntryMode": "test_entry_mode",
                        "cardType": "test_card_type",
                        "maskedPan": "test_masked_pan",
                        "referenceNumber": "test_reference",
                        "terminalVerificationResults": "0000000000",
                    },
                    "createdAt": "2000-01-01T00:00:00.000+0000",
                    "type": "IZETTLE_CARD",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                }
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "1",
                    "libraryProduct": True,
                    "name": "test_name2",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 5,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 2000,
                    "totalAmount": 2000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 4
    assert write_args_mock.call_count == 4
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            2000,
            "2000-01-01T00:00:00.000+0000",
            0.0,
            0.0,
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/products.csv",
            "test_name2",
            5,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/card.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            "test_masked_pan",
            2000,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]


def test_cash_payment_is_recorded():
    test_path = "test/path"
    test_json = [
        {
            "amount": 1000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "gpsCoordinates": {
                "accuracyMeters": 35.0,
                "latitude": 00.0000000000000,
                "longitude": 00.00000000000000,
            },
            "groupedVatAmounts": {"0.0": 1000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 1000,
                    "attributes": {
                        "changeAmount": 0,
                        "handedAmount": 0,
                    },
                    "type": "IZETTLE_CASH",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                }
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 1000,
                    "totalAmount": 1000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 3
    assert write_args_mock.call_count == 3
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            1000,
            "2000-01-01T00:00:00.000+0000",
            0.0,
            0.0,
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/cash.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            1000,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]


def test_cash_and_card_payment_is_recorded():
    test_path = "test/path"
    test_json = [
        {
            "amount": 1000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "gpsCoordinates": {
                "accuracyMeters": 35.0,
                "latitude": 00.0000000000000,
                "longitude": 00.00000000000000,
            },
            "groupedVatAmounts": {"0.0": 1000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 500,
                    "attributes": {
                        "changeAmount": 0,
                        "handedAmount": 0,
                    },
                    "type": "IZETTLE_CASH",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a2",
                },
                {
                    "amount": 500,
                    "attributes": {
                        "applicationIdentifier": "A1111111111111",
                        "applicationName": "test_application",
                        "authorizationCode": "six_nums",
                        "cardHolderVerificationMethod": "test_verification_method",
                        "cardPaymentEntryMode": "test_entry_mode",
                        "cardType": "test_card_type",
                        "maskedPan": "test_masked_pan",
                        "referenceNumber": "test_reference",
                        "terminalVerificationResults": "0000000000",
                    },
                    "createdAt": "2000-01-01T00:00:00.000+0000",
                    "type": "IZETTLE_CARD",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                },
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 1000,
                    "totalAmount": 1000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 4
    assert write_args_mock.call_count == 4
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            1000,
            "2000-01-01T00:00:00.000+0000",
            0.0,
            0.0,
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/cash.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a2",
            500,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/card.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            "test_masked_pan",
            500,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]


def test_a_product_with_no_name_gets_passed():
    test_path = "test/path"
    test_json = [
        {
            "amount": 1000,
            "country": "test_country",
            "created": "2000-01-01T00:00:00.000+0000",
            "currency": "test_currency",
            "discounts": [],
            "globalPurchaseNumber": 1,
            "gpsCoordinates": {
                "accuracyMeters": 35.0,
                "latitude": 00.0000000000000,
                "longitude": 00.00000000000000,
            },
            "groupedVatAmounts": {"0.0": 1000},
            "organizationId": 10000000,
            "payments": [
                {
                    "amount": 1000,
                    "attributes": {
                        "applicationIdentifier": "A1111111111111",
                        "applicationName": "test_application",
                        "authorizationCode": "six_nums",
                        "cardHolderVerificationMethod": "test_verification_method",
                        "cardPaymentEntryMode": "test_entry_mode",
                        "cardType": "test_card_type",
                        "maskedPan": "test_masked_pan",
                        "referenceNumber": "test_reference",
                        "terminalVerificationResults": "0000000000",
                    },
                    "createdAt": "2000-01-01T00:00:00.000+0000",
                    "type": "IZETTLE_CARD",
                    "uuid": "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
                }
            ],
            "products": [
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "0",
                    "libraryProduct": True,
                    "name": "test_name",
                    "productUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "variantName": "",
                    "variantUuid": "11a11111-111a-11aa-a111-1aaa1111a111",
                    "vatPercentage": 0.0,
                },
                {
                    "autoGenerated": False,
                    "details": {},
                    "fromLocationUuid": "11111aa1-111a-11aa-aaa1-a11aaaa11aa1",
                    "grossTax": 0,
                    "grossValue": 1000,
                    "id": "1",
                    "libraryProduct": False,
                    "quantity": 1,
                    "rowTaxableAmount": 1000,
                    "taxExempt": False,
                    "taxRates": [{"percentage": 0}],
                    "toLocationUuid": "11111aa1-111a-11aa-11aa-a11111a11111",
                    "type": "PRODUCT",
                    "unitPrice": 1000,
                    "vatPercentage": 0.0,
                },
            ],
            "purchaseNumber": 100,
            "purchaseUUID": "aAaaaAaAAaaaAaA1AA1AaA",
            "purchaseUUID1": "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            "receiptCopyAllowed": True,
            "references": {"checkoutUUID": "a1aa1111-1a11-11aa-aa1a-111a111a1111"},
            "refund": False,
            "refunded": False,
            "source": "POS",
            "taxAmount": 0,
            "taxValues": [
                {
                    "label": None,
                    "taxAmount": 0,
                    "taxValue": 0,
                    "taxableAmount": 1000,
                    "totalAmount": 1000,
                }
            ],
            "taxationMode": "INCLUSIVE",
            "taxationType": "VAT",
            "timestamp": "2000-01-01T00:00:00.000+0000",
            "userDisplayName": "test_user",
            "userId": 1111111,
            "vatAmount": 0,
        }
    ]
    with patch("src.extract.extract_write.write_args") as write_args_mock:
        result = extract_write(test_path, test_json)
    assert result == 3
    assert write_args_mock.call_count == 3
    arg_list = [
        (
            f"{test_path}/purchases.csv",
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
            1000,
            "2000-01-01T00:00:00.000+0000",
            0.0,
            0.0,
        ),
        (
            f"{test_path}/products.csv",
            "test_name",
            1,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
        (
            f"{test_path}/card.csv",
            "a1a1111a-1a11-11aa-aaa1-111111aaa1a1",
            "test_masked_pan",
            1000,
            "a1aa1111-1a11-11aa-aa1a-111a111a1111",
        ),
    ]
    kwarg_list = [{}, {}, {}]
    for index, params in enumerate(write_args_mock.call_args_list):
        assert arg_list[index] == params[0]
        assert kwarg_list[index] == params[1]
